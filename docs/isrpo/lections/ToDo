Использование `git remote origin` и `git remote upstream` зависит от структуры работы с репозиториями и их назначения в процессе разработки.

### 1. **`git remote origin`**

`origin` — это стандартное имя удалённого репозитория, которое создаётся по умолчанию при клонировании репозитория. Обычно оно используется для связи с *вашим* основным удалённым репозиторием, с которым вы работаете, в том числе для выполнения push и pull операций.

#### Когда использовать `origin`:
- **Основной репозиторий проекта**: Если вы являетесь владельцем репозитория и работаете напрямую с основным проектом.
- **Push изменений**: Для отправки изменений в основной удалённый репозиторий.
- **Pull изменений**: Для получения новых изменений из этого удалённого репозитория.
  
**Пример**:
Если вы создаёте собственный проект или получаете репозиторий через `git clone`, то `origin` будет ссылаться на этот репозиторий:

```bash
git clone https://github.com/yourusername/your-repo.git
```

В этом случае `origin` будет указывать на этот удалённый репозиторий, и все ваши команды `git push origin` будут отправлять изменения в этот основной репозиторий.

### 2. **`git remote upstream`**

`upstream` — это дополнительный удалённый репозиторий, который используется в сценарии работы с форком. Он указывает на оригинальный репозиторий, от которого был создан форк. Этот термин часто используется в контексте командной разработки, когда вы работаете с чужим проектом, клонируя его через форк.

#### Когда использовать `upstream`:
- **Работа с форком**: Если вы форкнули репозиторий, ваш `origin` указывает на ваш форк, а `upstream` указывает на оригинальный репозиторий.
- **Получение обновлений из основного репозитория**: Чтобы синхронизировать ваш форк с оригинальным репозиторием (который вы не контролируете), вы используете `upstream` для получения изменений и слияния их в свой форк.

**Пример**:
1. Вы форкаете проект с основного репозитория.
2. Клонируете свой форк:
    ```bash
    git clone https://github.com/yourusername/forked-repo.git
    ```
3. Затем добавляете оригинальный репозиторий как `upstream`:
    ```bash
    git remote add upstream https://github.com/original-owner/original-repo.git
    ```

4. Когда в оригинальном репозитории появляются обновления, вы можете подтянуть их в свой форк:
    ```bash
    git fetch upstream
    git merge upstream/master
    ```

### **Итог: когда использовать `origin` и `upstream`**

- **`origin`** используется для взаимодействия с основным репозиторием, над которым вы работаете (будь это ваш личный проект или форк).
- **`upstream`** используется для взаимодействия с оригинальным репозиторием в сценарии работы с форками (когда вы не владеете этим репозиторием, но хотите получать обновления).

#### Пример работы с форком:
1. Вы форкаете репозиторий `original-repo`.
2. Ваш `origin` указывает на форк: `https://github.com/yourusername/forked-repo.git`.
3. `upstream` указывает на оригинальный репозиторий: `https://github.com/original-owner/original-repo.git`.
4. Вы работаете в своём форке (push в `origin`), а затем периодически подтягиваете изменения из оригинального репозитория (fetch/merge из `upstream`).

Таким образом, `origin` используется для работы с вашим удалённым репозиторием, а `upstream` — для синхронизации с оригинальным проектом.